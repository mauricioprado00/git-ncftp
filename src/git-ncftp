#!/bin/bash

<<COMMENT

notes.
show to replace vars:
use something like:
path="ssync.tools.ncftp.default.params."
exports=$(git config --list | grep "$path" | sed "s/^$path//g" | tr "\n" ";")

cheer='hello $user how are you'
echo $(sh -c "$exports echo $cheer")

another way:
path="ssync.tools.ncftp.default.params."
eval $(git config --list | grep "$path" | sed "s/^$path//g" | tr "\n" ";")

cheer='hello $user how are you'
eval echo $cheer




for git log:
git log $current

#echo "${*:1:1}"
#IFS=', ' read -a args <<< "$@"
#echo ${args[0]}
#echo ${args[1]}
#echo ${args[2]}

COMMENT

trap "exit 1" TERM
export TOP_PID=$$

# extract current branch name
BRANCH=$(git name-rev HEAD 2> /dev/null | awk "{ print \$2 }")

# get a version string, so archives will not be overwritten when creating
# many of them
VERSION=$(git describe --always --long)

# get the current working tool
TOOL=$(git config ssync.current.tool)

# get the current working scope
SCOPE=$(git config ssync.current.scope)

#error echo
echoerr() { echo "$@" 1>&2; }


function show_help()
{
   vrb=$1
   if [ "$vrb" = "help" ]; then
   cat << HELP
ssync 
usage: git ssync <command>

commands:

   init        initialzes the remote repository
   log         shows the logs of the latest uploaded commit on the server
   push        push the current local branch HEAD into the remote environment
   catchup     sets the remote HEAD to the current local branch HEAD


   #configure params for all tools
   git config ssync.tools.default.scopes.default.params.[paramname] [paramvalue]

   #configure params for tool
   git config ssync.tools.[tool].scopes.default.params.[paramname] [paramvalue]

   #configure tool retrieve last commit 
   git config ssync.tools.[tool].getcommit '[shell script]'

   #configure tool to set last commit
   git ocnfig ssync.tools.[tool].setcommit '[shell script]'

   #configure tool to upload all files in current directory
   git config ssync.tools.[tool].push '[shell script]'

   #configure params for tool and scope (this will override the tool params)
   git config ssync.tools.[tool].scopes.[scope].params.[paramname]

   #set current tool:
   git config ssync.current.tool [tool]

   #set current scope
   git config ssync.current.scope [scope]

   #set current scope branch (you will only be able to push from this branch)
   git config ssync.current.branch [branchname]

   #view remote log
   git ssync log

   #push commits
   git ssync push

   #set remote head
   git ssync catchup [partial commit id]


   example with ncftp as tool and default as scope

   #create a directory repository
   mkdir testssync
   cd testssync
   git init
   echo data > myfile
   git add myfile
   git commit -m "initial commit"

   #configure params for tool
   git config ssync.tools.ncftp.scopes.default.params.lastcommitfile "last_commit"

   #configure tool to retrieve last commit
   git config ssync.tools.ncftp.getcommit 'ncftpget -u$user -p$password $domain . $path$lastcommitfile; cat $lastcommitfile'

   #configure tool to set last commit
   git config ssync.tools.ncftp.setcommit 'echo % > $lastcommitfile;ncftpput -u$user -p$password $domain $path $lastcommitfile'

   #configure tool to upload everything in the current directory
   git config ssync.tools.ncftp.push 'ncftpput -u\$user -p\$password \$domain \$path *'

   #configure params for dummy tool
   git config ssync.tools.dummy.scopes.default.params.some "some value"

   #configure scope default
   git config ssync.tools.ncftp.scopes.default.params.user mauricio
   git config ssync.tools.ncftp.scopes.default.params.password asdtyu
   git config ssync.tools.ncftp.scopes.default.params.domain localhost
   git config ssync.tools.ncftp.scopes.default.params.path /www/testproj/
HELP
   end_process

   fi
}

function blue()
{
   echo $'\033[34m'$*$'.\033[0m\n'
}

function green()
{
   echo $'\033[32m'$*$'.\033[0m\n'
}

function red()
{
   echo $'\033[31m'$*$'.\033[0m\n'
}

function cyan()
{
   echo $'\033[36m'$*$'.\033[0m\n'
}



function get_tools()
{
   git config --list | grep ssync\.tools | sed "s/^ssync\\.tools\\.//g" | sed "s#\\..\+##g" | sort | uniq
}

function end_process()
{
   kill -s TERM $TOP_PID
}

function tool_exists()
{
   tools=$(get_tools)
   for tool in $tools
   do
      if [ "$tool" = "$1" ]; then
         echo $1; break
      fi
   done
}

function list_tool_scopes()
{
   tool=$1
   tools=$(get_tools)
   git config --list | grep ssync\.tools\.$tool\.scopes\. | sed "s/^ssync\\.tools\\.$tool\\.scopes\\.//g" | sed "s#\\..\+##g" | sort | uniq
}

function scope_exists()
{
   tool=$1
   scope=$2
   scopes=$(list_tool_scopes $tool)

   for temp in $scopes
   do
      if [ "$scope" = "$temp" ]; then
         echo $scope; break
      fi
   done
}

function validate_tool()
{
   #CHECK THAT THE CURRENT SELECTED TOOL IS VALID
   if [ "$TOOL" = "" ]; then
      tools=$(get_tools)
      if [ "$tools" = "" ]; then
         echo "you dont have any ssync tools, you can configure one, example:

       #configure params for dummy tool
       git config ssync.tools.dummy.params.some \"some value\"

       #configure tool to retrieve last commit
       git config ssync.tools.dummy.getcommit 'dummy -p\$some --get-last-commit'
       
       #configure tool to set last commit
       git config ssync.tools.dummy.setcommit 'dummy -p\$some --set-last-commit=%'

       #configure tool to upload everything in the current directory
       git config ssync.tools.dummy.push 'dummy -p\$some --upload-current-dir-content'

   "
         end_process
      fi
      echo "you have to select a tool, use:
      git config ssync.current.tool [toolname]
   available tools for this repo:"   

      echo $tools
      end_process
   fi

   temp=$(tool_exists $TOOL)
   if [ "$temp" = "" ]; then
      eval git config --unset ssync.current.tool 
      echo "the tool ssync $TOOL does not exists"
      echo $tools
      end_process
   fi
}


function validate_scope()
{
   if [ "$SCOPE" = "" ]; then
      echo "You dont have any scope selected, using the default scope"
      SCOPE="default"
   fi
   
   temp=$(scope_exists $TOOL $SCOPE)
   if [ "$temp" = "" ]; then
      echo "the scope $SCOPE does not exists for the tool $TOOL"
      end_process
   fi
}

function expand_commitid()
{
   local commit=$(git merge-base $1 $BRANCH  2>/dev/null)
   local status=$?
   if [ $status -ne 0 ]; then
      return 1
   fi
   echo $commit
}

function get_tool_config()
{
   retval=""
   retval=$(git config ssync.tools.$TOOL.$1)
   echo $retval
}

function get_req_tool_config()
{
   retval=$(get_tool_config $1)
   if [ "$retval" = "" ]; then
      echoerr "The tool configuration \"$1\" is required"
      echoerr "Please define it using:"
      echoerr "   git config ssync.tools.$TOOL.$1 \"some value\""
      end_process
   fi
   echo $retval
}

function extract_tool_scope_params()
{
   #extracting first the default params
   path="ssync.tools.$TOOL.scopes.default.params."
   eval $(git config --list | grep "$path" | sed "s/^$path//g" | tr "\n" ";")

   #afteward the scoped params
   path="ssync.tools.$TOOL.scopes.$SCOPE.params."
   eval $(git config --list | grep "$path" | sed "s/^$path//g" | tr "\n" ";")
}

function remotehead()
{
   local __resultvar=$1
   local __rcommit
   local __dieifwrong=$2 # 1 by default

   extract_tool_scope_params
   getcommit=$(get_req_tool_config getcommit)
   repo=$(pwd)
   dir=`mktemp -d` && cd $dir
   echo $(cyan "retrieving remote log")

   echo -e "\033[33;1m"
   __rcommit=$(eval $getcommit)
   echo -e "\033[0m"

   rm -Rf $dir
   cd $repo

   if [ "$__dieifwrong" = "" ] || [ "$__dieifwrong" = "1" ]; then
      if [ "$__rcommit" = "" ]; then
         echo $(red "Seems like the remote repository is not initialized")
         echo "you can initialize by using: "
         echo $'\tgit ssync init'
         echo $'\t(it will upload all the content of the repository)\n'
         echo "or you can use git catchup: "
         echo $'\tgit catchup [commit_id]';
         echo $'\t(it will mark the remote HEAD repository to the provided commit_id, or to HEAD if no commit id is provided)'
         end_process
      fi
   fi


   eval $__resultvar=$__rcommit
}

function process_log()
{
   if [ "$1" = "log" ]; then
      remotehead rcommit

      commit=$(expand_commitid $rcommit)

      if [ "$commit" = "" ]; then
         echo "The remote repository is set to the INVALID (or ahead local repository) commit id: $rcommit"
      else
         git log $commit
      fi
      end_process
   fi
}

function commitid_orhead()
{
   local commit
   if [ "$1" = "" ]; then
      commit=$(expand_commitid HEAD)
   else
      commit=$(expand_commitid $1)
      if [ "$commit" = "" ]; then
         return
      fi
   fi
   echo $commit
}

function process_catchup()
{
   if [ "$1" = "catchup" ]; then
      commit=$(commitid_orhead $2)
      if [ "$commit" = "" ]; then
         echo $(red "the commit id \"$2\" is not valid")
         end_process
      fi

      setcommit=$(get_req_tool_config setcommit)
      extract_tool_scope_params
      dir=`mktemp -d` && cd $dir
      echo $(cyan "catching up to $commit")
      setcommit=${setcommit/\%/$commit}

      echo -e "\033[33;1m"
      eval $setcommit
      echo -e "\033[0m"

      rm -Rf $dir

      end_process
   fi
}

function process_push()
{
   if [ "$1" = "push" ]; then
      commit=$(commitid_orhead $2)
      if [ "$commit" = "" ]; then
         echo $(red "the commit id \"$2\" is not valid")
         end_process
      fi

      echo "pushing to remote environment $commit"
      end_process
   fi
}

show_help $@
validate_tool
validate_scope

echo "TOOL $TOOL, SCOPE: $SCOPE"

process_log "${@:1}"
process_catchup "${@:1}"
process_push "${@:1}"
end_process   



echo working on scope \"$SCOPE\". \(to switch to \"newscope\" use: \"git config ncftp.current-scope newscope\" \)

function get_config()
{
   retval=""
   retval=$(git config ncftp.$SCOPE.$1)
   echo $retval
}

function get_req_config()
{
   retval=$(get_config $1)
   if [ "$retval" = "" ]; then
      echoerr "Configuration \"$1\" for scope \"$SCOPE\" is required"
      echoerr "Please define it using:"
      echoerr "   git config ncftp.$SCOPE.$1 \"some value\""
      end_process
   fi
   echo $retval
}

user=$(get_req_config user)
password=$(get_req_config password)
host=$(get_req_config host)
remote_dir=$(get_req_config remote-dir)

echo "listing remote directory"
echo $(ncftpls -u$user -p$password ftp://$host$remote_dir)

exit
